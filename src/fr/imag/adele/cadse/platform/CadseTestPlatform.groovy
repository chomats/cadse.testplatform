package fr.imag.adele.cadse.platform;import java.lang.Systemimport java.io.File;import groovy.util.AntBuilderimport java.lang.Longimport java.lang.Booleanimport java.lang.Throwableimport java.lang.Throwable

public class CadseTestPlatform {
	
	String testPlatformPath	String wsTest
	String testEclipsePath	String testReport
	AntBuilder ant
	boolean debugFlag = false	String _buildNumber = null	final String defaultTimezone = 'GMT+2'		int testPassed = 0	int testFailed = 0	int testCount  = 0	boolean collapseSuccess = true;		final long startTime = System.currentTimeMillis();		CadseTest[] cadseTests ;		CadseTestCollector cadseCollector = new CadseTestCollector()	BuildManager buildManager;		public CadseTestPlatform() {		ant =  new AntBuilder();		// load properties ...		File f = null;		f = new File(ant.project.properties.basedir, "test.properties");		if (f.exists()) {			ant.property(file:f);		}		f = new File(ant.project.properties.get("user.home"), ".cadse_test.properties")		if (f.exists()) {			ant.property(file:f);		}		f = new File(ant.project.properties.basedir, "cadse_test.properties");		if (f.exists()) {			ant.property(file:f);		}				testPlatformPath = ant.project.properties.testPlatformPath		testReport ="${testPlatformPath}/report"		testEclipsePath  = "$testPlatformPath/eclipse"		collapseSuccess = ant.project.properties.collapseSuccess == null ? true : Boolean.parseBoolean( ant.project.properties.collapseSuccess);				println("********************************************************");		println("* base dir : ${ant.project.properties.basedir}");		println("* test Platform Path : ${testPlatformPath}");		println("* test report Path   : ${testReport}");		println("* test eclipse Path  : ${testEclipsePath}");		println("********************************************************");		println("");				buildManager = new BuildManager(ant, testPlatformPath)		wsTest = ant.project.properties.wsTest			}		public void addBundle(BundleBuildDescription b) {		for(findB in buildManager.bundlestoCompile) {			if (findB.equals(b)) return;		}		buildManager.bundlestoCompile.add( b);	}		public void addBundle(String path, String name, String defaultSource) {		addBundle(new BundleBuildDescription(path, name, defaultSource));	}		/** true if failed */	public boolean compileAll() {		for(b in buildManager.bundlestoCompile) {			if (buildManager.createBundle(b.path, b.name, b.defaultSource))				return true;		}		return false;	}		/** true if failed */	public boolean run(CadseTest ct, CadseTestPart tp) {		for(b in tp.bundlestoDelete)			buildManager.deleteBundle(b);		buildManager.bundlestoCompile = tp.bundlestoCompile;		if (compileAll()) {			showResult();			return true;		}				/* Test preparation */		long startTime = System.currentTimeMillis();		messageStartTestSuite(tp.testName);						/* Test running */		boolean failed = new RunJavaTestClass(this, tp).run(tp.c);				/* Test statistics */		tp.timestamp = System.currentTimeMillis()-startTime		tp.status = failed ? 1 : 0;		if (failed)			ct.status = 1;		messageTestSuiteResults()		return failed	}			/** true if failed */	public boolean runTests(CadseTest... cadseTest) {		this.cadseTests = cadseTest;				this.testCount = cadseTest.length;		for(ct in cadseTest) {			ct.setCadseTestPlatform(this);		}		for(ct in cadseTest) {			ct.init();		}		if (compileAll()) {			showResult();			return true;		}		for(ct in cadseTest) {			try {				if (!ct.runTest()) {					this.testPassed++;					ct.status = 0;				} else {					this.testFailed++;					ct.status = 1;				}			} catch(Throwable e) {				println "TEST Exception "+ ct.getName();				e.printStackTrace()				this.testFailed++;				ct.status = 1;			}			messageTestSuiteResults();		}				return testPassed != testCount;	}		private void messageStartTestSuite(String testName) {		println("");		println("********************************************************");		println("* Starting Test Suite : " + testName);		println("********************************************************");		println("");	}		private String toStringTime(long t) {		t /= 1000 // seconds		long minutes = t / 60		long seconds = t % 60				return "${minutes} min ${seconds} seconds.";	}		private void messageTestMethod(CadseTestPart tp) {		for (CadseTestMethod tm : tp.tests) {			if (tm.status == 1) {				println("*         [ ERROR ] " + tm.name);			}else			if (tm.status == 0)				println("*         [SUCCESS] " + tm.name);			else				println("*         [NOT RUN] " + tm.name);		}	}		private void messageCadseTestPart(CadseTest ct) {		for (CadseTestPart tp : ct.parts) {			if (tp.status == 1) {				println("*     [ ERROR ] " + tp.getName()+ " (" + toStringTime(tp.timestamp) + " )");				messageTestMethod(tp);			}			else			if (tp.status == 0) {				println("*     [SUCCESS] " + tp.getName()+ " (" + toStringTime(tp.timestamp) + " )");				if (!collapseSuccess)					messageTestMethod(tp);			} else 				println("*     [NOT RUN] " + tp.getName());		}	}	private void messageTestSuiteResults() {		long duration = System.currentTimeMillis() - startTime;		String generalFlag = "[SUCCESS]";				println("");		println("********************************************************");		println("* TEST RESULTS");		println("********************************************************");		println("*");				for (CadseTest ct : cadseTests) {						if (ct.status == 1) {				println("* [ ERROR ] " + ct.getName()+ " (" + toStringTime(ct.timestamp) + " )");				generalFlag = "[ ERROR ]"				messageCadseTestPart(ct);			}			else			if (ct.status == 0) {				println("* [SUCCESS] " + ct.getName()+ " (" + toStringTime(ct.timestamp) + " )");				if (!collapseSuccess)					messageCadseTestPart(ct);			} else if (ct.status == -2) {				println("* [RUNNING] " + ct.getName());				messageCadseTestPart(ct);			} else				println("* [NOT RUN] " + ct.getName());		}				println("*");		println("* " + generalFlag + " TOTAL : " + toStringTime(duration));		println("*");		println("********************************************************");		println("");	}
}