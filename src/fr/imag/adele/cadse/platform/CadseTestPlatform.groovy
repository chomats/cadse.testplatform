package fr.imag.adele.cadse.platform;import java.util.jar.Manifestimport java.util.Localeimport java.text.SimpleDateFormatimport java.lang.Systemimport java.io.File;import java.io.FileInputStreamimport java.util.Propertiesimport groovy.util.AntBuilderimport org.osgi.framework.Versionimport org.junit.Assertimport java.lang.Longimport java.lang.Booleanimport groovy.lang.Closureimport java.lang.NullPointerExceptionimport java.lang.Throwableimport java.lang.Throwableimport junit.framework.TestFailureimport org.eclipse.ui.internal.misc.TestPartListenerimport org.eclipse.jdt.internal.junit.model.ITestRunListener2;import org.eclipse.jdt.internal.junit.model.RemoteTestRunnerClient;

public class CadseTestPlatform {

	String testPlatformPath	String wsTest
	String testEclipsePath	String testReport
	AntBuilder ant
	boolean debugFlag = false	String _buildNumber = null	final String defaultTimezone = 'GMT+2'	int testPassed = 0	int testFailed = 0	int testCount  = 0		ArrayList<String> ts_name = new ArrayList<String>()	ArrayList<Boolean> ts_result = new ArrayList<Boolean>()	ArrayList<Long> ts_duration = new ArrayList<Long>()	final long startTime = System.currentTimeMillis();	CadseTestCollector cadseCollector = new CadseTestCollector()	BuildManager buildManager;	public CadseTestPlatform() {		ant =  new AntBuilder();		ant.property(file:"test.properties");		File f = new File(ant.project.properties.basedir, "cadse_test.properties");		if (!f.exists()) {			f = new File(ant.project.properties.get("user.home"), ".cadse_test.properties")		}		ant.property(file:f);		testPlatformPath = ant.project.properties.testPlatformPath		testReport ="${testPlatformPath}/report"		testEclipsePath  = "$testPlatformPath/eclipse"		buildManager = new BuildManager(ant, testPlatformPath)		wsTest = ant.project.properties.wsTest	}	public void addBundle(BundleBuildDescription b) {		for(findB in buildManager.bundlestoCompile) {			if (findB.equals(b)) return;		}		buildManager.bundlestoCompile.add( b);	}	public void addBundle(String path, String name, String defaultSource) {		addBundle(new BundleBuildDescription(path, name, defaultSource));	}		/** true if failed */	public boolean compileAll() {		for(b in buildManager.bundlestoCompile) {			if (buildManager.createBundle(b.path, b.name, b.defaultSource))				return true;		}		return false;	}	/** true if failed */	public boolean runJavaTest(String testProperties, String testName, String testPluginName, String classname) {		return runJavaTest(testProperties, testName, testPluginName, classname, null);	}	/** true if failed */	public boolean runJavaTest(String testProperties, String testName, String testPluginName, String classname, Closure c) {				/* Test preparation */		long startTime = System.currentTimeMillis();		messageStartTestSuite(testName);						/* Test running */		boolean retval = new RunJavaTestClass(this, testProperties, testName,testPluginName, classname).run(c);				/* Test statistics */		ts_name.add(testName)		ts_result.add(retval)		ts_duration.add(System.currentTimeMillis()-startTime)		messageTestSuiteResults()				return retval	}	/** true if failed */	public boolean runTests(CadseTest... cadseTest) {		this.testCount = cadseTest.length;		for(ct in cadseTest) {			ct.setCadseTestPlatform(this);		}		for(ct in cadseTest) {			ct.addBundleToCompile();		}		if (compileAll()) {			showResult();			return true;		}		for(ct in cadseTest) {			try {				if (!ct.runTest()) {					this.testPassed++;				} else {					this.testFailed++;				}			} catch(Throwable e) {				e.printStackTrace()				this.testFailed++;			}		}		return testPassed != testCount;	}		private void messageStartTestSuite(String testName) {		System.out.println("");		System.out.println("********************************************************");		System.out.println("* Starting Test Suite : " + testName);		System.out.println("********************************************************");		System.out.println("");	}		private void messageTestSuiteResults() {		long duration = System.currentTimeMillis() - startTime;		duration /= 1000 // seconds		long minutes = duration / 60		long seconds = duration % 60		String generalFlag = "[SUCCESS]";				System.out.println("");		System.out.println("********************************************************");		System.out.println("* TEST RESULTS");		System.out.println("********************************************************");		System.out.println("*");			for (int i=0; i<ts_name.size(); i++) {			long sec = ts_duration[i] / 1000; 						if (ts_result[i]) {				System.out.println("* [ ERROR ] " + ts_name[i] + " (" + sec + " seconds)");				generalFlag = "[ ERROR ]"			}			else				System.out.println("* [SUCCESS] " + ts_name[i] + " (" + sec + " seconds)");		}		System.out.println("*");		System.out.println("* " + generalFlag + " TOTAL : " + minutes + "min " + seconds + "s.");		System.out.println("*");		System.out.println("********************************************************");		System.out.println("");	}
}